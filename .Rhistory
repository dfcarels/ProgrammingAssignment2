args(matrix)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
a <- makeCacheMatrix(matrix(1:6, nrow = 2, ncol = 3))
a$get()
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:6, nrow = 4, ncol = 4))
a$get()
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
a$get()
cacheSolve(a)
?solve
a <- makeCacheMatrix(matrix(1:16, nrow = 2, ncol = 2))
a$get()
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
a$get()
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
a$get()
b <- a$set(matrix(5:8, nrow = 2, ncol = 2))
cacheSolve(b)
a$setinverse(matrix(5:8, nrow = 2, ncol = 2))
a$getinverse()
cacheSolve(a)
rm(b)
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
a$get()
a$setinverse(matrix(5:8, nrow = 2, ncol = 2))
a$getinverse()
cacheSolve(a)
a <- makeCacheMatrix(matrix(2:5, nrow = 2, ncol = 2))
a$get()
a$setinverse(matrix(7:10, nrow = 2, ncol = 2))
a$getinverse()
cacheSolve(a)
a$get()
b <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve(b)
solve(matrix(1:4, nrow = 2, ncol = 2))
solve(matrix(c(1,3,6,9), nrow = 2, ncol = 2))
a <- makeCacheMatrix(matrix(2:5, nrow = 2, ncol = 2))
a$get()
a$setinverse(matrix(7:10, nrow = 2, ncol = 2))
a$getinverse()
cacheSolve(a)
b <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve(b)
